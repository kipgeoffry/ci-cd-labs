pipeline {
  agent {
    docker {
      image 'kipgeoffry/jenkins-agent-maven:3.8.1'
      alwaysPull false
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.m2:/root/.m2' // mount Docker socket to access the host's Docker daemon,second volume is for caching to avoid downloading of dependencies on each build
    }
  }
  stages {
    stage('Build and Test App') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://192.168.5.43:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build Docker Image') {
      environment {
        DOCKER_IMAGE = "kipgeoffry/ci-cd-labs:v1.${BUILD_NUMBER}"
        DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('dockerHub-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def customImage = docker.image("${DOCKER_IMAGE}")
           docker.withRegistry('https://index.docker.io/v1/', "dockerHub-cred") {
                customImage.push()
                customImage.push('latest')
           }
        }
      }
      post {
        always {
            sh 'docker logout'
        }
      }
    }
  }
}
